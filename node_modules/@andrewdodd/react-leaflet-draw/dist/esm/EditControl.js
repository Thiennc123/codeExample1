function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { PropTypes } from 'prop-types';
import Draw from 'leaflet-draw'; // eslint-disable-line

import { isEqual } from 'lodash';
import { withLeaflet, MapControl } from 'react-leaflet';
import L, { Map } from 'leaflet'; // import 'leaflet-draw/dist/leaflet.draw.css'

var eventHandlers = {
  onEdited: L.Draw.Event.EDITED,
  onCreated: L.Draw.Event.CREATED,
  onDeleted: L.Draw.Event.DELETED,
  onDrawStart: L.Draw.Event.DRAWSTART,
  onDrawStop: L.Draw.Event.DRAWSTOP,
  onDrawVertex: L.Draw.Event.DRAWVERTEX,
  onEditStart: L.Draw.Event.EDITSTART,
  onEditMove: L.Draw.Event.EDITMOVE,
  onEditResize: L.Draw.Event.EDITRESIZE,
  onEditVertex: L.Draw.Event.EDITVERTEX,
  onEditStop: L.Draw.Event.EDITSTOP,
  onDeleteStart: L.Draw.Event.DELETESTART,
  onDeleteStop: L.Draw.Event.DELETESTOP,
  onToolbarOpened: L.Draw.Event.TOOLBAROPENED,
  onToolbarCloser: L.Draw.Event.TOOLBARCLOSED,
  onMarkerContext: L.Draw.Event.MARKERCONTEXT
};
export var DrawPropTypes = PropTypes.shape({
  polyline: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  polygon: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  rectangle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  circle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  marker: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])
});
export var EditPropTypes = PropTypes.shape({
  edit: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  remove: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  poly: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
  allowIntersection: PropTypes.bool
});
export var PositionPropType = PropTypes.oneOf(['topright', 'topleft', 'bottomright', 'bottomleft']);

var EditControl =
/*#__PURE__*/
function (_MapControl) {
  _inherits(EditControl, _MapControl);

  function EditControl() {
    _classCallCheck(this, EditControl);

    return _possibleConstructorReturn(this, _getPrototypeOf(EditControl).apply(this, arguments));
  }

  _createClass(EditControl, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          onMounted = _this$props.onMounted,
          leaflet = _this$props.leaflet;
      var map = leaflet.map; // register all event handlers for leaflet-draw

      for (var key in eventHandlers) {
        if (this.props[key]) {
          map.on(eventHandlers[key], this.props[key], this);
        }
      }

      _get(_getPrototypeOf(EditControl.prototype), "componentDidMount", this).call(this);

      onMounted && onMounted(this.leafletElement);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var map = this.props.leaflet.map;
      var onWillUnmount = this.props.onWillUnmount;
      onWillUnmount && onWillUnmount(this.leafletElement);
      this.leafletElement.remove(map);

      for (var key in eventHandlers) {
        if (this.props[key]) {
          map.off(eventHandlers[key], this.props[key], this);
        }
      }
    }
  }, {
    key: "createLeafletElement",
    value: function createLeafletElement() {
      return createDrawControl(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // super updates positions if thats all that changed so call this first
      _get(_getPrototypeOf(EditControl.prototype), "componentDidUpdate", this).call(this, prevProps);

      if (isEqual(this.props.draw, prevProps.draw) || isEqual(this.props.edit, prevProps.edit) || this.props.position !== prevProps.position) {
        return;
      }

      var map = this.props.leaflet.map;
      this.leafletElement.remove(map);
      this.leafletElement = createDrawControl(this.props);
      this.leafletElement.addTo(map);
    }
  }]);

  return EditControl;
}(MapControl);

_defineProperty(EditControl, "propTypes", _objectSpread({}, Object.keys(eventHandlers).reduce(function (acc, val) {
  acc[val] = PropTypes.func;
  return acc;
}, {}), {
  onMounted: PropTypes.func,
  onWillUnmount: PropTypes.func,
  draw: DrawPropTypes,
  edit: EditPropTypes,
  position: PositionPropType
}));

_defineProperty(EditControl, "contextTypes", {
  map: PropTypes.instanceOf(Map),
  layerContainer: PropTypes.shape({
    addLayer: PropTypes.func.isRequired,
    removeLayer: PropTypes.func.isRequired
  })
});

function createDrawControl(props) {
  var layerContainer = props.leaflet.layerContainer;
  var draw = props.draw,
      edit = props.edit,
      position = props.position;
  var options = {
    edit: _objectSpread({}, edit, {
      featureGroup: layerContainer
    })
  };

  if (draw) {
    // leaflet-draw mutates underlying object, so create a copy
    options.draw = _objectSpread({}, draw);
  }

  if (position) {
    options.position = position;
  }

  return new L.Control.Draw(options); // eslint-disable-line
}

export default withLeaflet(EditControl);