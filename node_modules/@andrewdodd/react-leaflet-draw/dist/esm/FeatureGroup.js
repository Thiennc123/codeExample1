function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { FeatureGroup } from 'react-leaflet';
import LeafletDrawControl, { DrawPropTypes, EditPropTypes, PositionPropType } from './EditControl';

var EditControlFeatureGroup =
/*#__PURE__*/
function (_Component) {
  _inherits(EditControlFeatureGroup, _Component);

  function EditControlFeatureGroup() {
    var _this;

    _classCallCheck(this, EditControlFeatureGroup);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditControlFeatureGroup).call(this));
    _this._featureGroupRef = React.createRef();
    _this._editControlRef = React.createRef();
    _this._createStoreRef = _this._createStoreRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onCreated = _this._onCreated.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onEdited = _this._onEdited.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onDeleted = _this._onDeleted.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onActivityStarted = _this._onActivityStarted.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onActivityStopped = _this._onActivityStopped.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._leaflets = {};
    return _this;
  }

  _createClass(EditControlFeatureGroup, [{
    key: "_createStoreRef",
    value: function _createStoreRef(elem) {
      var _this2 = this;

      return function (ref) {
        if (!ref) {
          return;
        }

        _this2._leaflets[ref.leafletElement._leaflet_id] = elem;
      };
    }
  }, {
    key: "_onCreated",
    value: function _onCreated(e) {
      var onCreated = this.props.onCreated;
      onCreated && onCreated(e); // .layer.getLatLngs()[0])
    }
  }, {
    key: "_onEdited",
    value: function _onEdited(e) {
      var _this3 = this;

      var onEdited = this.props.onEdited;
      if (!onEdited) return; // Call onEdited for each layer included

      e.layers.getLayers().forEach(function (l) {
        var elem = _this3._leaflets[l._leaflet_id];
        onEdited(elem, l, e); // .getLatLngs()[0])
      });
    }
  }, {
    key: "_onDeleted",
    value: function _onDeleted(e) {
      var _this4 = this;

      var onDeleted = this.props.onDeleted;
      if (!onDeleted) return; // Call onDeleted for each layer included

      e.layers.getLayers().forEach(function (l) {
        var elem = _this4._leaflets[l._leaflet_id];
        onDeleted(elem, l, e);
      });
    }
  }, {
    key: "_onActivityStarted",
    value: function _onActivityStarted(e) {
      var onActivityStarted = this.props.onActivityStarted;
      onActivityStarted && onActivityStarted(e.type);
    }
  }, {
    key: "_onActivityStopped",
    value: function _onActivityStopped(e) {
      var onActivityStopped = this.props.onActivityStopped;
      onActivityStopped && onActivityStopped(e.type);
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var controlProps = this.props.controlProps;
      return React.createElement(FeatureGroup, {
        ref: this._featureGroupRef
      }, React.createElement(LeafletDrawControl, _extends({}, controlProps, {
        onDeleted: this._onDeleted,
        onCreated: this._onCreated,
        onEdited: this._onEdited,
        onDrawStart: this._onActivityStarted,
        onEditStart: this._onActivityStarted,
        onDeleteStart: this._onActivityStarted,
        onDrawStop: this._onActivityStopped,
        onEditStop: this._onActivityStopped,
        onDeleteStop: this._onActivityStopped,
        ref: this._editControlRef
      })), React.Children.map(this.props.children, function (child) {
        return React.cloneElement(child, {
          ref: _this5._createStoreRef(child)
        });
      }));
    }
  }]);

  return EditControlFeatureGroup;
}(Component);

_defineProperty(EditControlFeatureGroup, "propTypes", {
  children: PropTypes.node,
  onCreated: PropTypes.func,
  onEdited: PropTypes.func,
  onDeleted: PropTypes.func,
  controlProps: PropTypes.shape({
    draw: DrawPropTypes,
    edit: EditPropTypes,
    position: PositionPropType
  })
});

export { EditControlFeatureGroup as default };