{"ast":null,"code":"import \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/button/style/css\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style/css\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/home/thiennc/projects/airagri-frontend/src/Layout/Topbar/TopbarProfileModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { profileService } from '@iso/services';\nimport userActions from '@iso/redux/user/actions';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport TopbarProfileModalWrapper from './TopbarProfileModal.styles';\nconst {\n  store\n} = userActions;\n\nconst TopbarProfileModal = props => {\n  const dispatch = useDispatch();\n\n  const [form] = _Form.useForm();\n\n  const [loading, setLoading] = useState(false);\n  const [checkingPassword, setCheckingPassword] = useState(true);\n  const [fields, setFields] = useState([]);\n  const currentUser = useSelector(state => state.user.user);\n  useEffect(() => {\n    if (checkingPassword) {\n      setFields([{\n        name: ['profile', 'name'],\n        value: currentUser.name || ''\n      }, {\n        name: ['profile', 'mobile_phone'],\n        value: currentUser.mobile_phone || ''\n      }, {\n        name: ['profile', 'current_password'],\n        value: ''\n      }, {\n        name: ['profile', 'password'],\n        value: ''\n      }, {\n        name: ['profile', 'confirm_password'],\n        value: ''\n      }]);\n    }\n  }, [checkingPassword, props.visibleProfile]);\n\n  const cancelModal = () => {\n    props.cancelModal();\n    setCheckingPassword(true);\n  };\n\n  const handleSubmit = () => {\n    setLoading(true);\n    form.validateFields().then(values => {\n      onStore(values);\n    }).catch(info => {\n      console.log('Validate Failed:', info);\n      setLoading(false);\n    });\n    setLoading(false);\n  };\n\n  const onStore = async values => {\n    values.profile.name = values.profile.name.trim();\n    values.profile.mobile_phone = values.profile.mobile_phone.trim();\n\n    if (values.profile.current_password === '' && values.profile.password === '' && values.profile.confirm_password === '') {\n      const data = {\n        \"user\": { ...values.profile\n        }\n      };\n      profileService.updateProfile(data, currentUser.id).then(res => {\n        if (res.code === '0000') {\n          dispatch(store());\n          props.cancelModal();\n          setCheckingPassword(true);\n        } else {\n          setLoading(false);\n        }\n      });\n    } else {\n      const current_pwd = {\n        \"current_password\": values.profile.current_password\n      };\n      var res = await profileService.checkCurrentPassword(current_pwd, currentUser.id);\n\n      if (res.code !== '0000') {\n        setCheckingPassword(false);\n        return false;\n      } else {\n        const data = {\n          \"user\": { ...values.profile\n          }\n        };\n        profileService.updateProfile(data, currentUser.id).then(res => {\n          if (res.code === '0000') {\n            dispatch(store());\n            props.cancelModal();\n            setCheckingPassword(true);\n          } else {\n            setLoading(false);\n          }\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(TopbarProfileModalWrapper, {\n    forceRender: true,\n    visible: props.visibleProfile,\n    title: /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"topbar.modal.editProfile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 14\n      }\n    }),\n    onCancel: cancelModal,\n    maskClosable: false,\n    footer: [/*#__PURE__*/React.createElement(_Button, {\n      key: \"back\",\n      onClick: cancelModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"propertyPage.modal.cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 12\n      }\n    })), /*#__PURE__*/React.createElement(_Button, {\n      key: \"submit\",\n      className: \"btn-success\",\n      type: \"primary\",\n      loading: loading,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"propertyPage.modal.save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 12\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Form, {\n    form: form,\n    layout: \"vertical\",\n    scrollToFirstError: true,\n    fields: fields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'name'],\n    className: \"isoInputWrapper\",\n    label: \"Name\",\n    rules: [{\n      required: true,\n      message: 'This field is required',\n      whitespace: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    placeholder: \"Input your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'mobile_phone'],\n    className: \"isoInputWrapper\",\n    label: \"Phone\",\n    rules: [{\n      required: true,\n      message: 'This field is required',\n      whitespace: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    placeholder: \"Input your phone number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'current_password'],\n    className: \"isoInputWrapper\",\n    label: \"Current Password\",\n    rules: [({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value && getFieldValue('profile').password === '' || value && getFieldValue('profile').password !== '') {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('This field is required!');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    type: \"password\",\n    size: \"large\",\n    placeholder: \"Input your current password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  })), !checkingPassword ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ant-form-item-has-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 39\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ant-form-item-explain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 80\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 119\n    }\n  }, \"Current Password is incorrect!\"))) : '', /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'password'],\n    className: \"isoInputWrapper\",\n    label: \"New Password\",\n    rules: [({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value && getFieldValue('profile').current_password === '' || getFieldValue('profile').current_password !== value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The New Password must be different from the Current Password!');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    type: \"password\",\n    placeholder: \"Input your new password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'confirm_password'],\n    className: \"isoInputWrapper\",\n    label: \"Confirm Password\",\n    rules: [({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value && getFieldValue('profile').password === '' || getFieldValue('profile').password === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The New Password and Confirm Password do not match!');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    type: \"password\",\n    placeholder: \"Input your new password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default TopbarProfileModal;","map":{"version":3,"sources":["/home/thiennc/projects/airagri-frontend/src/Layout/Topbar/TopbarProfileModal.js"],"names":["React","useState","useEffect","useDispatch","useSelector","profileService","userActions","IntlMessages","TopbarProfileModalWrapper","store","TopbarProfileModal","props","dispatch","form","useForm","loading","setLoading","checkingPassword","setCheckingPassword","fields","setFields","currentUser","state","user","name","value","mobile_phone","visibleProfile","cancelModal","handleSubmit","validateFields","then","values","onStore","catch","info","console","log","profile","trim","current_password","password","confirm_password","data","updateProfile","id","res","code","current_pwd","checkCurrentPassword","required","message","whitespace","getFieldValue","validator","rule","Promise","resolve","reject"],"mappings":"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","sourcesContent":["import React , { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport { profileService } from '@iso/services';\nimport userActions from '@iso/redux/user/actions';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport TopbarProfileModalWrapper from './TopbarProfileModal.styles';\n\nconst { store } = userActions;\n\nconst TopbarProfileModal = (props) => {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [checkingPassword, setCheckingPassword] = useState(true);\n  const [fields, setFields] = useState([]);\n  const currentUser = useSelector((state) => state.user.user);\n  useEffect(() => {\n    if(checkingPassword){\n      setFields([\n        {\n          name: ['profile', 'name'],\n          value: currentUser.name || '',\n        },\n        {\n          name: ['profile', 'mobile_phone'],\n          value: currentUser.mobile_phone || '',\n        },\n        {\n          name: ['profile', 'current_password'],\n          value: '',\n        },\n        {\n          name: ['profile', 'password'],\n          value: '',\n        },\n        {\n          name: ['profile', 'confirm_password'],\n          value: '',\n        },\n      ]);\n    }\n  }, [checkingPassword, props.visibleProfile]);\n\n  const cancelModal = () => {\n    props.cancelModal();\n    setCheckingPassword(true);\n  }\n\n  const handleSubmit = () => {\n    setLoading(true);\n    form\n      .validateFields()\n      .then(values => {\n        onStore(values);\n      })\n      .catch(info => {\n        console.log('Validate Failed:', info);\n        setLoading(false);\n      });\n    setLoading(false);\n  }\n\n  const onStore = async (values) => {\n    values.profile.name = values.profile.name.trim();\n    values.profile.mobile_phone = values.profile.mobile_phone.trim();\n    if(values.profile.current_password === '' && values.profile.password === '' && values.profile.confirm_password === ''){\n       const data = {\n        \"user\":{\n          ...values.profile\n        }\n      }\n      profileService.updateProfile(data, currentUser.id).then(res => {\n        if(res.code === '0000'){\n          dispatch(store());\n          props.cancelModal();\n          setCheckingPassword(true);\n        } else {\n          setLoading(false);\n        }\n      });\n    }else{\n        const current_pwd = {\"current_password\":values.profile.current_password};\n        var res = await profileService.checkCurrentPassword(current_pwd, currentUser.id);\n        if(res.code !== '0000'){\n          setCheckingPassword(false);\n          return false;\n        } else {\n          const data = {\n            \"user\":{\n              ...values.profile\n            }\n          }\n          profileService.updateProfile(data, currentUser.id).then(res => {\n            if(res.code === '0000'){\n              dispatch(store());\n              props.cancelModal();\n              setCheckingPassword(true);\n            } else {\n              setLoading(false);\n            }\n          });\n        }\n    }\n  }\n\n  return (\n    <TopbarProfileModalWrapper\n      forceRender={true}\n      visible={props.visibleProfile}\n      title={<IntlMessages id=\"topbar.modal.editProfile\" />}\n      onCancel={cancelModal}\n      maskClosable={false}\n      footer={[\n        <Button key=\"back\" onClick={cancelModal}>\n          {<IntlMessages id=\"propertyPage.modal.cancel\" />}\n        </Button>,\n        <Button key=\"submit\" className=\"btn-success\" type=\"primary\" loading={loading} onClick={handleSubmit}>\n          {<IntlMessages id=\"propertyPage.modal.save\" />}\n        </Button>,\n      ]}\n    >\n     <Form\n            form={form}\n            layout=\"vertical\"\n            scrollToFirstError\n            fields={fields}\n          >\n          <div className=\"form-body\">\n            <Form.Item\n              name={['profile', 'name']}\n              className=\"isoInputWrapper\"\n              label=\"Name\"\n              rules={[\n                {\n                  required: true,\n                  message: 'This field is required',\n                  whitespace: true,\n                },\n              ]}\n            >\n              <Input size=\"large\" placeholder=\"Input your name\"/>\n            </Form.Item>\n            <Form.Item\n              name={['profile', 'mobile_phone']}\n              className=\"isoInputWrapper\"\n              label=\"Phone\"\n              rules={[\n                {\n                  required: true,\n                  message: 'This field is required',\n                  whitespace: true,\n                },\n              ]}\n            >\n              <Input size=\"large\" placeholder=\"Input your phone number\"/>\n            </Form.Item>\n            <Form.Item\n              name={['profile', 'current_password']}\n              className=\"isoInputWrapper\"\n              label=\"Current Password\"\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if ((!value && getFieldValue('profile').password === '') || (value && getFieldValue('profile').password !== '')) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject('This field is required!');\n                  },\n                }),\n              ]}\n            >\n              <Input type=\"password\" size=\"large\" placeholder=\"Input your current password\"/>\n            </Form.Item>\n              { (!checkingPassword) ? <div className=\"ant-form-item-has-error\"><div className=\"ant-form-item-explain\"><div>Current Password is incorrect!</div></div></div> : ''}\n            <Form.Item\n              name={['profile', 'password']}\n              className=\"isoInputWrapper\"\n              label=\"New Password\"\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if ((!value && getFieldValue('profile').current_password === '')|| getFieldValue('profile').current_password !== value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject('The New Password must be different from the Current Password!');\n                  },\n                }),\n              ]}\n            >\n              <Input size=\"large\" type=\"password\" placeholder=\"Input your new password\"/>\n            </Form.Item>\n            <Form.Item\n              name={['profile', 'confirm_password']}\n              className=\"isoInputWrapper\"\n              label=\"Confirm Password\"\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if ((!value && getFieldValue('profile').password === '') || getFieldValue('profile').password === value ) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject('The New Password and Confirm Password do not match!');\n                  },\n                }),\n              ]}\n            >\n              <Input size=\"large\" type=\"password\" placeholder=\"Input your new password\"/>\n            </Form.Item>\n          </div>  \n      </Form>\n    </TopbarProfileModalWrapper>\n  );\n}\n\nexport default TopbarProfileModal;"]},"metadata":{},"sourceType":"module"}