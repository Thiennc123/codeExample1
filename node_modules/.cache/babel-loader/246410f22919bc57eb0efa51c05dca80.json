{"ast":null,"code":"import \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/button/style/css\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style/css\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/home/thiennc/projects/airagri-frontend/src/Layout/Topbar/TopbarProfileModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { profileService } from '@iso/services';\nimport userActions from '@iso/redux/user/actions';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport TopbarProfileModalWrapper from './TopbarProfileModal.styles';\nconst {\n  store\n} = userActions;\n\nconst TopbarProfileModal = props => {\n  const dispatch = useDispatch();\n\n  const [form] = _Form.useForm();\n\n  const [loading, setLoading] = useState(false);\n  const [fields, setFields] = useState([]);\n  const currentUser = useSelector(state => state.user.user);\n  useEffect(() => {\n    setFields([{\n      name: ['profile', 'name'],\n      value: currentUser.name || ''\n    }, {\n      name: ['profile', 'mobile_phone'],\n      value: currentUser.mobile_phone || ''\n    }]);\n  }, []);\n\n  const cancelModal = () => {\n    props.cancelModal();\n  };\n\n  const handleSubmit = e => {\n    setLoading(true);\n    form.validateFields().then(values => {\n      onStore(values);\n    }).catch(info => {\n      console.log('Validate Failed:', info);\n      setLoading(false);\n    });\n    setLoading(false);\n  };\n\n  const onStore = values => {\n    console.log(values);\n    const data = {\n      \"user\": { ...values.profile\n      }\n    };\n    profileService.updateProfile(data, currentUser.id).then(res => {\n      if (res.code === '0000') {\n        dispatch(store());\n        props.cancelModal();\n      } else {\n        setLoading(false);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(TopbarProfileModalWrapper, {\n    forceRender: true,\n    visible: props.visibleProfile,\n    title: /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"topbar.modal.editProfile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }\n    }),\n    onCancel: cancelModal,\n    maskClosable: false,\n    footer: [/*#__PURE__*/React.createElement(_Button, {\n      key: \"back\",\n      onClick: cancelModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"propertyPage.modal.cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 12\n      }\n    })), /*#__PURE__*/React.createElement(_Button, {\n      key: \"submit\",\n      className: \"btn-success\",\n      type: \"primary\",\n      loading: loading,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"propertyPage.modal.save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 12\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Form, {\n    form: form,\n    layout: \"vertical\",\n    scrollToFirstError: true,\n    fields: fields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'name'],\n    className: \"isoInputWrapper\",\n    label: \"Name\",\n    rules: [{\n      required: true,\n      message: 'This field is required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    placeholder: \"Input your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'mobile_phone'],\n    className: \"isoInputWrapper\",\n    label: \"Phone\",\n    rules: [{\n      required: true,\n      message: 'This field is required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    placeholder: \"Input your phone number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'current_password'],\n    className: \"isoInputWrapper\",\n    label: \"Current Password\",\n    rules: [{\n      message: 'This field is required'\n    }, () => ({\n      validator(rule, value) {\n        if (value) {\n          const current_pwd = {\n            'current_password': value\n          };\n          return profileService.checkCurrentPassword(current_pwd, currentUser.id);\n        } else return Promise.resolve();\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    type: \"password\",\n    placeholder: \"Input your current password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'password'],\n    className: \"isoInputWrapper\",\n    label: \"New Password\",\n    rules: [({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('profile').current_password !== value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The New Password must be different from the Current Password!');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    type: \"password\",\n    placeholder: \"Input your new password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(_Form.Item, {\n    name: ['profile', 'confirm_password'],\n    className: \"isoInputWrapper\",\n    label: \"Confirm Password\",\n    rules: [({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('profile').password === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The New Password and Confirm Password do not match!');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    size: \"large\",\n    type: \"password\",\n    placeholder: \"Input your new password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default TopbarProfileModal;","map":{"version":3,"sources":["/home/thiennc/projects/airagri-frontend/src/Layout/Topbar/TopbarProfileModal.js"],"names":["React","useState","useEffect","useDispatch","useSelector","profileService","userActions","IntlMessages","TopbarProfileModalWrapper","store","TopbarProfileModal","props","dispatch","form","useForm","loading","setLoading","fields","setFields","currentUser","state","user","name","value","mobile_phone","cancelModal","handleSubmit","e","validateFields","then","values","onStore","catch","info","console","log","data","profile","updateProfile","id","res","code","visibleProfile","required","message","validator","rule","current_pwd","checkCurrentPassword","Promise","resolve","getFieldValue","current_password","reject","password"],"mappings":"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","sourcesContent":["import React , { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport { profileService } from '@iso/services';\nimport userActions from '@iso/redux/user/actions';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport TopbarProfileModalWrapper from './TopbarProfileModal.styles';\n\nconst { store } = userActions;\n\nconst TopbarProfileModal = (props) => {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [fields, setFields] = useState([]);\n  const currentUser = useSelector((state) => state.user.user);\n  useEffect(() => {\n      setFields([\n        {\n          name: ['profile', 'name'],\n          value: currentUser.name || '',\n        },\n        {\n          name: ['profile', 'mobile_phone'],\n          value: currentUser.mobile_phone || '',\n        },\n      ]);\n    \n  }, []);\n\n  const cancelModal = () => {\n    props.cancelModal();\n  }\n\n  const handleSubmit = (e) => {\n    setLoading(true);\n\n    form\n      .validateFields()\n      .then(values => {\n        onStore(values);\n      })\n      .catch(info => {\n        console.log('Validate Failed:', info);\n        setLoading(false);\n      });\n    setLoading(false);\n  }\n\n  const onStore = (values) => {\n    console.log(values);\n    const data = {\n      \"user\":{\n        ...values.profile\n      }\n    }\n    profileService.updateProfile(data, currentUser.id).then(res => {\n      if(res.code === '0000'){\n        dispatch(store());\n\n        props.cancelModal();\n\n      } else {\n        setLoading(false);\n      }\n    });\n  }\n\n  return (\n    <TopbarProfileModalWrapper\n      forceRender={true}\n      visible={props.visibleProfile}\n      title={<IntlMessages id=\"topbar.modal.editProfile\" />}\n      onCancel={cancelModal}\n      maskClosable={false}\n      footer={[\n        <Button key=\"back\" onClick={cancelModal}>\n          {<IntlMessages id=\"propertyPage.modal.cancel\" />}\n        </Button>,\n        <Button key=\"submit\" className=\"btn-success\" type=\"primary\" loading={loading} onClick={handleSubmit}>\n          {<IntlMessages id=\"propertyPage.modal.save\" />}\n        </Button>,\n      ]}\n    >\n     <Form\n            form={form}\n            layout=\"vertical\"\n            scrollToFirstError\n            fields={fields}\n          >\n          <div className=\"form-body\">\n            <Form.Item\n              name={['profile', 'name']}\n              className=\"isoInputWrapper\"\n              label=\"Name\"\n              rules={[\n                {\n                  required: true,\n                  message: 'This field is required',\n                },\n              ]}\n            >\n              <Input size=\"large\" placeholder=\"Input your name\"/>\n            </Form.Item>\n            <Form.Item\n              name={['profile', 'mobile_phone']}\n              className=\"isoInputWrapper\"\n              label=\"Phone\"\n              rules={[\n                {\n                  required: true,\n                  message: 'This field is required',\n                },\n              ]}\n            >\n              <Input size=\"large\" placeholder=\"Input your phone number\"/>\n            </Form.Item>\n            <Form.Item\n              name={['profile', 'current_password']}\n              className=\"isoInputWrapper\"\n              label=\"Current Password\"\n              rules={[\n                {\n                  message: 'This field is required',\n                },\n                () => ({\n                  validator(rule, value) {\n                    if(value){\n                      const current_pwd = {'current_password':value};\n                      return profileService.checkCurrentPassword(current_pwd, currentUser.id);\n                    }\n                    else\n                      return Promise.resolve();\n                  },\n                }),\n              ]}\n            >\n              <Input size=\"large\" type=\"password\" placeholder=\"Input your current password\"/>\n            </Form.Item>\n            <Form.Item\n              name={['profile', 'password']}\n              className=\"isoInputWrapper\"\n              label=\"New Password\"\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('profile').current_password !== value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject('The New Password must be different from the Current Password!');\n                  },\n                }),\n              ]}\n            >\n              <Input size=\"large\" type=\"password\" placeholder=\"Input your new password\"/>\n            </Form.Item>\n            <Form.Item\n              name={['profile', 'confirm_password']}\n              className=\"isoInputWrapper\"\n              label=\"Confirm Password\"\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('profile').password === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject('The New Password and Confirm Password do not match!');\n                  },\n                }),\n              ]}\n            >\n              <Input size=\"large\" type=\"password\" placeholder=\"Input your new password\"/>\n            </Form.Item>\n          </div>  \n      </Form>\n    </TopbarProfileModalWrapper>\n  );\n}\n\nexport default TopbarProfileModal;"]},"metadata":{},"sourceType":"module"}