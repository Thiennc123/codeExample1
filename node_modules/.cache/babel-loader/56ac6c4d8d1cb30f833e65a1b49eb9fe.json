{"ast":null,"code":"var _jsxFileName = \"/home/thiennc/projects/airagri-frontend/src/containers/Pages/Task/Task.js\";\nimport React, { useState, useEffect } from 'react';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { taskService } from '@iso/services';\nimport TaskManagePage from './Task.styles';\nimport Board from 'react-trello';\n\nconst Task = () => {\n  const activePropertyId = useSelector(state => state.property.activePropertyId);\n  const [data, setData] = useState({\n    lanes: [{\n      id: 'todo',\n      title: 'To Do',\n      cards: []\n    }, {\n      id: 'underway',\n      title: 'Underway',\n      cards: []\n    }, {\n      id: 'completed',\n      title: 'Completed',\n      cards: []\n    }]\n  });\n  useEffect(() => {\n    if (activePropertyId) {\n      taskService.getBoard(activePropertyId).then(res => {\n        if (res.code === '0000') {\n          setData(res.data);\n        }\n      });\n    }\n  }, [activePropertyId]);\n\n  const onCardDelete = (cardId, laneId) => {\n    taskService.destroy(cardId);\n  };\n\n  const handleDragEnd = (cardId, sourceLaneId, targetLaneId, position, cardDetails) => {\n    const data = {\n      task: {\n        status: targetLaneId\n      },\n      position: position\n    };\n    taskService.changeStatus(data, cardId);\n  };\n\n  const onCardAdd = (card, laneId) => {\n    const data = {\n      task: {\n        title: card.title,\n        details: card.description,\n        status: laneId,\n        property_id: activePropertyId,\n        priority: 'medium'\n      }\n    };\n    taskService.storeOrUpdateTasks(data, null);\n  };\n\n  return /*#__PURE__*/React.createElement(LayoutWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TaskManagePage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    editable: true,\n    data: data,\n    onCardDelete: onCardDelete,\n    handleDragEnd: handleDragEnd,\n    onCardAdd: onCardAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Task;","map":{"version":3,"sources":["/home/thiennc/projects/airagri-frontend/src/containers/Pages/Task/Task.js"],"names":["React","useState","useEffect","LayoutWrapper","useSelector","useDispatch","taskService","TaskManagePage","Board","Task","activePropertyId","state","property","data","setData","lanes","id","title","cards","getBoard","then","res","code","onCardDelete","cardId","laneId","destroy","handleDragEnd","sourceLaneId","targetLaneId","position","cardDetails","task","status","changeStatus","onCardAdd","card","details","description","property_id","priority","storeOrUpdateTasks"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,KAAP,MAAkB,cAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,gBAAgB,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeF,gBAA3B,CAApC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC;AAC/Bc,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,EAAE,EAAE,MADN;AAEEC,MAAAA,KAAK,EAAE,OAFT;AAGEC,MAAAA,KAAK,EAAE;AAHT,KADK,EAOL;AACEF,MAAAA,EAAE,EAAE,UADN;AAEEC,MAAAA,KAAK,EAAE,UAFT;AAGEC,MAAAA,KAAK,EAAE;AAHT,KAPK,EAaL;AACEF,MAAAA,EAAE,EAAE,WADN;AAEEC,MAAAA,KAAK,EAAE,WAFT;AAGEC,MAAAA,KAAK,EAAE;AAHT,KAbK;AADwB,GAAD,CAAhC;AAwBAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGQ,gBAAH,EAAoB;AACjBJ,MAAAA,WAAW,CAACa,QAAZ,CAAqBT,gBAArB,EAAuCU,IAAvC,CAA4CC,GAAG,IAAI;AAClD,YAAGA,GAAG,CAACC,IAAJ,KAAa,MAAhB,EAAuB;AACrBR,UAAAA,OAAO,CAACO,GAAG,CAACR,IAAL,CAAP;AACD;AACF,OAJA;AAKF;AACF,GARQ,EAQN,CAACH,gBAAD,CARM,CAAT;;AAUA,QAAMa,YAAY,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AACvCnB,IAAAA,WAAW,CAACoB,OAAZ,CAAoBF,MAApB;AACD,GAFD;;AAIA,QAAMG,aAAa,GAAG,CAACH,MAAD,EAASI,YAAT,EAAuBC,YAAvB,EAAqCC,QAArC,EAA+CC,WAA/C,KAA+D;AACnF,UAAMlB,IAAI,GAAG;AACXmB,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEJ;AADJ,OADK;AAIXC,MAAAA,QAAQ,EAAEA;AAJC,KAAb;AAMAxB,IAAAA,WAAW,CAAC4B,YAAZ,CAAyBrB,IAAzB,EAA+BW,MAA/B;AACD,GARD;;AAUA,QAAMW,SAAS,GAAG,CAACC,IAAD,EAAOX,MAAP,KAAkB;AAClC,UAAMZ,IAAI,GAAG;AACXmB,MAAAA,IAAI,EAAE;AACJf,QAAAA,KAAK,EAAEmB,IAAI,CAACnB,KADR;AAEJoB,QAAAA,OAAO,EAAED,IAAI,CAACE,WAFV;AAGJL,QAAAA,MAAM,EAAER,MAHJ;AAIJc,QAAAA,WAAW,EAAE7B,gBAJT;AAKJ8B,QAAAA,QAAQ,EAAE;AALN;AADK,KAAb;AASAlC,IAAAA,WAAW,CAACmC,kBAAZ,CAA+B5B,IAA/B,EAAqC,IAArC;AACD,GAXD;;AAaA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACA,IAAA,QAAQ,EAAE,IADV;AAEA,IAAA,IAAI,EAAEA,IAFN;AAGA,IAAA,YAAY,EAAEU,YAHd;AAIA,IAAA,aAAa,EAAEI,aAJf;AAKA,IAAA,SAAS,EAAEQ,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAaD,CA5ED;;AA8EA,eAAe1B,IAAf","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { taskService } from '@iso/services';\nimport TaskManagePage from './Task.styles';\nimport Board from 'react-trello'\n\nconst Task = () => {\n  const activePropertyId = useSelector((state) => state.property.activePropertyId);\n  const [data, setData] = useState({\n    lanes: [\n      {\n        id: 'todo',\n        title: 'To Do',\n        cards: [          \n        ]\n      },\n      {\n        id: 'underway',\n        title: 'Underway',\n        cards: [          \n        ]\n      },\n      {\n        id: 'completed',\n        title: 'Completed',\n        cards: [          \n        ]\n      },\n    ]\n  });\n\n  \n  useEffect(() => {\n    if(activePropertyId){\n       taskService.getBoard(activePropertyId).then(res => {\n        if(res.code === '0000'){\n          setData(res.data);\n        }\n      });\n    }\n  }, [activePropertyId]);\n\n  const onCardDelete = (cardId, laneId) => {\n    taskService.destroy(cardId);\n  }\n\n  const handleDragEnd = (cardId, sourceLaneId, targetLaneId, position, cardDetails) => {\n    const data = {\n      task: {\n        status: targetLaneId,        \n      },\n      position: position\n    }\n    taskService.changeStatus(data, cardId);  \n  }\n  \n  const onCardAdd = (card, laneId) => {\n    const data = {\n      task: {\n        title: card.title,\n        details: card.description,\n        status: laneId,\n        property_id: activePropertyId,\n        priority: 'medium'\n      }\n    }\n    taskService.storeOrUpdateTasks(data, null);\n  }\n\n  return(\n    <LayoutWrapper>\n      <TaskManagePage>\n        <Board \n        editable={true}\n        data={data} \n        onCardDelete={onCardDelete}\n        handleDragEnd={handleDragEnd}\n        onCardAdd={onCardAdd}\n        />\n      </TaskManagePage>  \n    </LayoutWrapper>\n  )\n}\n\nexport default Task;"]},"metadata":{},"sourceType":"module"}