{"ast":null,"code":"var _jsxFileName = \"/home/thiennc/projects/airagri-frontend/src/containers/Pages/PropertyMap/components/Task/Task.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Marker } from 'react-leaflet';\nimport { IconTask } from '../../Icons/IconTask';\nimport _ from 'lodash';\nimport TaskModal from './TaskModal';\nimport { taskService } from '@iso/services';\nimport btnSaveAction from '@iso/redux/btnSave/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport modalActions from '@iso/redux/modal/actions';\nconst {\n  show\n} = btnSaveAction;\nconst {\n  openModal\n} = modalActions;\n\nconst Task = props => {\n  const [tasks, setTasks] = useState({});\n  const [dataTask, setDataTask] = useState({});\n  const [primaryObjects, setPrimaryObjects] = useState([]);\n  const objectRef = React.useRef([]);\n  const dispatch = useDispatch();\n  const saveSuccess = useSelector(state => state.btnSave.saveSuccess);\n  const cancelSave = useSelector(state => state.btnSave.cancelSave);\n  const dataTransfer = useSelector(state => state.btnSave.data);\n  const modalData = useSelector(state => state.modal.modalData);\n  const updateDataTasks = React.useCallback(propertyId => {\n    taskService.getList(propertyId).then(res => {\n      if (res.code === '0000') {\n        setTasks(res.tasks);\n      }\n    });\n  }, [props.primaryObjects]);\n  useEffect(() => {\n    setPrimaryObjects(props.primaryObjects);\n  }, [props.primaryObjects]);\n  useEffect(() => {\n    if (props.propertyId) {\n      updateDataTasks(props.propertyId);\n    }\n  }, [updateDataTasks, props.propertyId]);\n  const saveLocation = React.useCallback((task, dataTransfer) => {\n    var layer = objectRef.current[task.id].leafletElement;\n    var point = dataTransfer.points;\n    const data = {\n      task: { ...task,\n        point\n      }\n    };\n    taskService.storeOrUpdateTasks(data, task.id).then(res => {\n      if (res.code === '0000') {\n        updateDataTasks(res.task.property_id);\n        layer.editing.disable();\n      }\n    });\n  }, [updateDataTasks]);\n  const cancelSaveArea = React.useCallback((propertyId, dataObjectId) => {\n    var layer = objectRef.current[dataObjectId].leafletElement;\n    layer.editing.disable();\n  }, []);\n  useEffect(() => {\n    if (saveSuccess && dataTransfer.type === 'task' && dataTask) {\n      saveLocation(dataTask, dataTransfer);\n    } else if (cancelSave && dataTransfer.type === 'task') {\n      cancelSaveArea(props.propertyId, dataTask.id);\n    }\n  }, [saveSuccess, saveLocation, dataTransfer, props.propertyId, cancelSave, dataTask, cancelSaveArea]);\n\n  const onSaved = savedTask => {\n    let taskTmp = _.clone(tasks);\n\n    const taskIndex = _.findIndex(taskTmp, task => {\n      return task.id === savedTask.id;\n    });\n\n    if (taskIndex === -1) {\n      taskTmp.push(savedTask);\n    } else {\n      taskTmp[taskIndex] = savedTask;\n    }\n\n    setTasks(taskTmp);\n  };\n\n  const handleShowTasks = data => {\n    var html = [];\n\n    if (data.length > 0) {\n      _.forEach(data, function (task) {\n        html.push( /*#__PURE__*/React.createElement(Marker, {\n          key: task.id,\n          position: [task.lat, task.lng],\n          icon: IconTask(),\n          onClick: handleClickTask.bind(this, task),\n          onDragEnd: handleEditTask.bind(this, task),\n          onRemove: handleRemoveTask.bind(this, task),\n          ref: el => objectRef.current[task.id] = el,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }\n        }));\n      });\n    }\n\n    return html;\n  };\n\n  const handleClickTask = (object, e) => {\n    //Not trigger anything if on deleted state\n    if (!props.controlDraw.current.leafletElement._toolbars.edit._modes.remove.handler._enabled) {\n      const modalData = {\n        object,\n        type: 'task'\n      };\n      dispatch(openModal(modalData));\n    }\n  };\n\n  const handleRemoveTask = (object, e) => {\n    props.handleSetDeletedTasks(object.id);\n  };\n\n  const handleEditTask = (object, e) => {\n    let LatLng = e.target.getLatLng();\n    object.lat = LatLng.lat;\n    object.lng = LatLng.lng;\n    props.handeSetUpdatedTasks(object, LatLng);\n  };\n\n  const editLocation = () => {\n    const data = {\n      objectRef,\n      dataId: modalData.object.id,\n      type: 'task'\n    };\n    dispatch(show(data));\n    setDataTask(modalData.object);\n    objectRef.current[modalData.object.id].leafletElement.editing.enable();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, handleShowTasks(tasks), /*#__PURE__*/React.createElement(TaskModal, {\n    updateDataTasks: updateDataTasks,\n    propertyId: props.propertyId,\n    primaryObjects: primaryObjects,\n    onSaved: onSaved,\n    editLocation: editLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Task;","map":{"version":3,"sources":["/home/thiennc/projects/airagri-frontend/src/containers/Pages/PropertyMap/components/Task/Task.js"],"names":["React","useState","useEffect","Marker","IconTask","_","TaskModal","taskService","btnSaveAction","useDispatch","useSelector","modalActions","show","openModal","Task","props","tasks","setTasks","dataTask","setDataTask","primaryObjects","setPrimaryObjects","objectRef","useRef","dispatch","saveSuccess","state","btnSave","cancelSave","dataTransfer","data","modalData","modal","updateDataTasks","useCallback","propertyId","getList","then","res","code","saveLocation","task","layer","current","id","leafletElement","point","points","storeOrUpdateTasks","property_id","editing","disable","cancelSaveArea","dataObjectId","type","onSaved","savedTask","taskTmp","clone","taskIndex","findIndex","push","handleShowTasks","html","length","forEach","lat","lng","handleClickTask","bind","handleEditTask","handleRemoveTask","el","object","e","controlDraw","_toolbars","edit","_modes","remove","handler","_enabled","handleSetDeletedTasks","LatLng","target","getLatLng","handeSetUpdatedTasks","editLocation","dataId","enable"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Marker } from 'react-leaflet';\nimport {  IconTask  } from '../../Icons/IconTask';\nimport _ from 'lodash';\nimport TaskModal from './TaskModal';\nimport { taskService } from '@iso/services';\nimport btnSaveAction from '@iso/redux/btnSave/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport modalActions from '@iso/redux/modal/actions';\n\nconst { show } = btnSaveAction;\nconst { openModal } = modalActions;\n\nconst Task = (props) => {\n  const [tasks, setTasks] = useState({});\n  const [dataTask, setDataTask] = useState({});\n  const [primaryObjects, setPrimaryObjects] = useState([]);\n  const objectRef = React.useRef([]);\n  const dispatch = useDispatch();\n  const saveSuccess = useSelector((state) => state.btnSave.saveSuccess);\n  const cancelSave = useSelector((state) => state.btnSave.cancelSave);\n  const dataTransfer = useSelector((state) => state.btnSave.data);\n  const modalData = useSelector((state) => state.modal.modalData);\n\n  const updateDataTasks = React.useCallback((propertyId) => {\n    taskService.getList(propertyId).then(res => {\n      if(res.code === '0000'){\n        setTasks(res.tasks);\n      }\n    })\n  }, [props.primaryObjects]);\n\n  useEffect(() => {\n    setPrimaryObjects(props.primaryObjects);\n  }, [props.primaryObjects]);\n\n  useEffect(() => {\n    if(props.propertyId){\n      updateDataTasks(props.propertyId);\n    }\n  }, [updateDataTasks, props.propertyId]);\n\n  const saveLocation = React.useCallback((task, dataTransfer) => {\n    var layer = objectRef.current[task.id].leafletElement;\n\n    var point = dataTransfer.points;\n\n    const data = {\n      task:{\n        ...task,\n        point\n      }\n    }\n    taskService.storeOrUpdateTasks(data, task.id).then(res => {\n      if(res.code === '0000'){\n        updateDataTasks(res.task.property_id)\n        layer.editing.disable();\n      }\n    });\n\n  }, [updateDataTasks]);\n\n  const cancelSaveArea = React.useCallback((propertyId, dataObjectId) => {\n    var layer = objectRef.current[dataObjectId].leafletElement;\n    layer.editing.disable();\n  }, []);\n\n  useEffect(() => {\n    if(saveSuccess && dataTransfer.type === 'task' && dataTask){\n      saveLocation(dataTask, dataTransfer);\n    } else if (cancelSave && dataTransfer.type === 'task'){\n      cancelSaveArea(props.propertyId, dataTask.id);\n    }\n  }, [saveSuccess, saveLocation, dataTransfer, props.propertyId, cancelSave, dataTask, cancelSaveArea])\n\n  const onSaved = (savedTask) => {\n    let taskTmp = _.clone(tasks);\n    const taskIndex = _.findIndex(taskTmp, (task) => {\n      return task.id === savedTask.id\n    });\n    if(taskIndex === -1){\n      taskTmp.push(savedTask);\n    } else {\n      taskTmp[taskIndex] = savedTask;\n    }\n    setTasks(taskTmp);\n  }\n  \n  const handleShowTasks = (data) => {\n    var html = [];\n    if(data.length > 0){\n      _.forEach(data, function(task){\n        html.push(\n          <Marker \n            key={task.id} \n            position={[task.lat, task.lng]} \n            icon={IconTask()}\n            onClick={handleClickTask.bind(this, task)}\n            onDragEnd={handleEditTask.bind(this, task)}\n            onRemove={handleRemoveTask.bind(this, task)}\n            ref={el => (objectRef.current[task.id] = el)}\n          />\n        );\n      });\n    }\n    return html;\n  }\n\n  const handleClickTask = (object, e) => {\n    //Not trigger anything if on deleted state\n    if(!props.controlDraw.current.leafletElement._toolbars.edit._modes.remove.handler._enabled){\n      const modalData = {\n        object,\n        type: 'task'\n      }\n      dispatch(openModal(modalData));\n    }\n  }\n\n  const handleRemoveTask = (object, e) => {\n    props.handleSetDeletedTasks(object.id);    \n  }\n\n  const handleEditTask = (object, e) => {\n    let LatLng = e.target.getLatLng();\n    object.lat = LatLng.lat;\n    object.lng = LatLng.lng;\n    props.handeSetUpdatedTasks(object, LatLng);\n  }\n\n  const editLocation = () => {\n    const data = {\n      objectRef,\n      dataId: modalData.object.id,\n      type: 'task'\n    }\n    dispatch(show(data));\n    setDataTask(modalData.object);\n    objectRef.current[modalData.object.id].leafletElement.editing.enable();\n  }\n\n  return (\n    <>\n      {handleShowTasks(tasks)}\n      <TaskModal\n        updateDataTasks={updateDataTasks}\n        propertyId={props.propertyId}\n        primaryObjects={primaryObjects}\n        onSaved={onSaved}\n        editLocation={editLocation}\n      />\n    </>\n  );\n}\n\nexport default Task;\n"]},"metadata":{},"sourceType":"module"}