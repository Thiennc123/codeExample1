{"ast":null,"code":"var _jsxFileName = \"/home/thiennc/projects/airagri-frontend/src/containers/Pages/Task/Task.js\";\nimport React, { useState, useEffect } from 'react';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { taskService } from '@iso/services';\nimport TaskManagePage from './Task.styles';\nimport Board from 'react-trello';\nimport modalActions from '@iso/redux/modal/actions';\nimport TaskModal from './TaskModal';\nimport _ from 'lodash';\nconst {\n  openModal\n} = modalActions;\n\nconst Task = () => {\n  const activePropertyId = useSelector(state => state.property.activePropertyId);\n  const dispatch = useDispatch();\n  const [modalVisibility, setModalVisibility] = React.useState(false);\n  const [data, setData] = useState({\n    lanes: [{\n      id: 'todo',\n      title: 'To Do',\n      cards: []\n    }, {\n      id: 'underway',\n      title: 'Underway',\n      cards: []\n    }, {\n      id: 'completed',\n      title: 'Completed',\n      cards: []\n    }]\n  });\n  useEffect(() => {\n    if (activePropertyId) {\n      taskService.getBoard(activePropertyId).then(res => {\n        if (res.code === '0000') {\n          setData(res.data);\n        }\n      });\n    }\n  }, [activePropertyId]);\n\n  const onCardDelete = (cardId, laneId) => {\n    taskService.destroy(cardId);\n  };\n\n  const [moveTaskId, setMoveTaskId] = useState(null);\n  const [moveLaneId, setMoveLaneId] = useState(null);\n\n  const handleDragEnd = (cardId, sourceLaneId, targetLaneId, position, cardDetails) => {\n    setMoveTaskId(cardId);\n    setMoveLaneId(targetLaneId);\n  };\n\n  const onDataChange = newData => {\n    if (moveTaskId && moveLaneId) {\n      let laneId = [\"todo\", \"underway\", \"completed\"].indexOf(moveLaneId);\n      let tasks = newData.lanes[laneId].cards;\n      let position = 0;\n\n      _.forEach(tasks, function (task, key) {\n        if (task.id === moveTaskId) {\n          if (tasks.length == 1) {\n            position = 65536;\n          } else if (tasks.length - 1 == key) {\n            position = tasks[tasks.length - 2].metadata.position + 65536;\n          } else if (key == 0) {\n            position = tasks[1].metadata.position / 2;\n          } else {\n            position = (tasks[key - 1].metadata.position + tasks[key + 1].metadata.position) / 2;\n          }\n\n          task.position = position;\n          const data = {\n            task: {\n              status: moveLaneId,\n              position: position\n            }\n          };\n          taskService.changeStatus(data, moveTaskId);\n          return;\n        }\n      });\n\n      setMoveTaskId(null);\n      setMoveLaneId(null);\n    }\n  };\n\n  const onCardAdd = (card, laneId) => {\n    const data = {\n      task: {\n        title: card.title,\n        details: card.description,\n        status: laneId,\n        property_id: activePropertyId,\n        priority: 'medium'\n      }\n    };\n    taskService.storeOrUpdateTasks(data, null).then(res => {\n      if (res.code === '0000') {\n        taskService.getBoard(activePropertyId).then(res => {\n          if (res.code === '0000') {\n            setData(res.data);\n          }\n        });\n      }\n    });\n  };\n\n  const onCardClick = (cardId, metadata, laneId) => {\n    showModal(metadata, laneId);\n  };\n\n  const showModal = (task, laneId) => {\n    const modalData = {\n      task,\n      type: 'task',\n      laneId\n    };\n    dispatch(openModal(modalData));\n  };\n\n  const onSaved = () => {\n    if (activePropertyId) {\n      taskService.getBoard(activePropertyId).then(res => {\n        if (res.code === '0000') {\n          setData(res.data);\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(LayoutWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TaskManagePage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    editable: true,\n    data: data,\n    onCardDelete: onCardDelete,\n    handleDragEnd: handleDragEnd,\n    onCardAdd: onCardAdd,\n    onCardClick: onCardClick,\n    onDataChange: onDataChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(TaskModal, {\n    propertyId: activePropertyId,\n    onSaved: onSaved,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Task;","map":{"version":3,"sources":["/home/thiennc/projects/airagri-frontend/src/containers/Pages/Task/Task.js"],"names":["React","useState","useEffect","LayoutWrapper","useSelector","useDispatch","taskService","TaskManagePage","Board","modalActions","TaskModal","_","openModal","Task","activePropertyId","state","property","dispatch","modalVisibility","setModalVisibility","data","setData","lanes","id","title","cards","getBoard","then","res","code","onCardDelete","cardId","laneId","destroy","moveTaskId","setMoveTaskId","moveLaneId","setMoveLaneId","handleDragEnd","sourceLaneId","targetLaneId","position","cardDetails","onDataChange","newData","indexOf","tasks","forEach","task","key","length","metadata","status","changeStatus","onCardAdd","card","details","description","property_id","priority","storeOrUpdateTasks","onCardClick","showModal","modalData","type","onSaved"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { taskService } from '@iso/services';\nimport TaskManagePage from './Task.styles';\nimport Board from 'react-trello';\nimport modalActions from '@iso/redux/modal/actions';\nimport TaskModal from './TaskModal';\nimport _ from 'lodash';\n\nconst { openModal } = modalActions;\n\n\nconst Task = () => {\n  const activePropertyId = useSelector((state) => state.property.activePropertyId);\n  const dispatch = useDispatch();\n  const [modalVisibility, setModalVisibility] = React.useState(false);\n  const [data, setData] = useState({\n    lanes: [\n      {\n        id: 'todo',\n        title: 'To Do',\n        cards: [          \n        ]\n      },\n      {\n        id: 'underway',\n        title: 'Underway',\n        cards: [          \n        ]\n      },\n      {\n        id: 'completed',\n        title: 'Completed',\n        cards: [          \n        ]\n      },\n    ]\n  });\n\n  \n  useEffect(() => {\n    if(activePropertyId){\n       taskService.getBoard(activePropertyId).then(res => {\n        if(res.code === '0000'){\n          setData(res.data);\n        }\n      });\n    }\n  }, [activePropertyId]);\n  \n  const onCardDelete = (cardId, laneId) => {\n    taskService.destroy(cardId);\n  }\n\n  const [moveTaskId, setMoveTaskId] = useState(null);\n  const [moveLaneId, setMoveLaneId] = useState(null);\n\n  const handleDragEnd = (cardId, sourceLaneId, targetLaneId, position, cardDetails) => {\n    setMoveTaskId(cardId); \n    setMoveLaneId(targetLaneId); \n  }\n\n  const onDataChange = (newData) => {\n    if(moveTaskId && moveLaneId){\n      let laneId = [\"todo\", \"underway\", \"completed\"].indexOf(moveLaneId);\n      let tasks = newData.lanes[laneId].cards;\n      let position = 0;\n      _.forEach(tasks, function(task, key){\n        if(task.id === moveTaskId){ \n          if(tasks.length == 1){\n            position = 65536;\n          }else if(tasks.length-1 == key){\n            position = tasks[tasks.length-2].metadata.position + 65536;\n          }else if(key==0){\n            position = tasks[1].metadata.position/2;\n          }else {\n            position = (tasks[key-1].metadata.position + tasks[key+1].metadata.position)/2;\n          }\n          task.position = position;\n          const data = {\n            task: {\n              status: moveLaneId,        \n              position: position\n            },          \n          }\n          taskService.changeStatus(data, moveTaskId);  \n        return;\n        }\n      });\n      setMoveTaskId(null);\n      setMoveLaneId(null);\n    }\n    \n  }\n  \n  const onCardAdd = (card, laneId) => {\n    const data = {\n      task: {\n        title: card.title,\n        details: card.description,\n        status: laneId,\n        property_id: activePropertyId,\n        priority: 'medium'\n      }\n    }\n    taskService.storeOrUpdateTasks(data, null).then(res => {\n      if(res.code === '0000'){\n        taskService.getBoard(activePropertyId).then(res => {\n          if(res.code === '0000'){\n            setData(res.data);\n          }\n        });\n      }\n    });\n  }\n\n  const onCardClick = (cardId, metadata, laneId) => {\n      showModal(metadata, laneId);\n      \n  }\n\n  const showModal = (task, laneId) => {\n    const modalData = {\n        task,\n        type: 'task',\n        laneId\n    }\n    dispatch(openModal(modalData));\n  }\n\n  const onSaved = () => {\n    if(activePropertyId){\n      taskService.getBoard(activePropertyId).then(res => {\n        if(res.code === '0000'){\n          setData(res.data);\n        }\n      });      \n    }\n  }\n\n  return(\n    <LayoutWrapper>\n      <TaskManagePage>\n        <Board \n        editable={true}\n        data={data} \n        onCardDelete={onCardDelete}\n        handleDragEnd={handleDragEnd}\n        onCardAdd={onCardAdd}\n        onCardClick={onCardClick}\n        onDataChange={onDataChange}\n        />\n      </TaskManagePage>\n      <TaskModal\n      propertyId={activePropertyId} \n      onSaved={onSaved}\n      /> \n    </LayoutWrapper>\n  )\n}\n\nexport default Task;"]},"metadata":{},"sourceType":"module"}