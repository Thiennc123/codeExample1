{"ast":null,"code":"import axios from \"axios\";\nimport { apiEndpoint } from '@iso/lib/helpers/endpoint';\nimport { authHeader } from '@iso/lib/helpers/authHeader';\nexport const userService = {\n  registers,\n  resendEmailConfirm,\n  checkEmailExists,\n  verifyEmail,\n  login,\n  checkEmailExistsInProperty\n};\n\nfunction registers(data) {\n  return axios.post(apiEndpoint.registers, data, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => {\n    if (res && res.status === 200) {\n      return res.data;\n    }\n  });\n}\n\nfunction resendEmailConfirm(email) {\n  return axios.get(apiEndpoint.resendEmailConfirmation, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    params: {\n      email\n    }\n  }).then(res => {\n    if (res && res.status === 200) {\n      return res.data;\n    }\n  });\n}\n\nfunction checkEmailExists(email) {\n  return axios.get(apiEndpoint.checkEmailExists, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    params: {\n      email\n    }\n  }).then(res => {\n    if (res && res.status === 200 && res.data.code === '0000' && res.data.email_already_exists) {\n      return Promise.reject('Email already exists');\n    }\n\n    return Promise.resolve();\n  });\n}\n\nfunction checkEmailExistsInProperty(email, propertyId) {\n  return axios.get(apiEndpoint.checkEmailExistsInProperty, {\n    headers: authHeader(),\n    params: {\n      email,\n      property_id: propertyId\n    }\n  }).then(res => {\n    if (res && res.status === 200 && res.data.code === '0000' && res.data.email_already_exists) {\n      return Promise.reject('Email already exists');\n    }\n\n    return Promise.resolve();\n  });\n}\n\nfunction verifyEmail(data) {\n  return axios.get(apiEndpoint.verifyEmail, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    params: {\n      token: data.token,\n      property_id: data.property_id\n    }\n  }).then(res => {\n    if (res && res.data.code === '0000' && res.data.access_token) {\n      localStorage.setItem(\"id_token\", res.data.access_token);\n    }\n\n    return res.data;\n  });\n}\n\nfunction login(data) {\n  return axios.post(apiEndpoint.sessions, {\n    email: data.email,\n    password: data.password\n  }, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    }\n  }).then(res => {\n    if (res && res.data.code === '0000' && res.data.access_token) {\n      localStorage.setItem(\"id_token\", res.data.access_token);\n    }\n\n    return res.data;\n  });\n}","map":{"version":3,"sources":["/home/thiennc/projects/airagri-frontend/src/services/user.service.js"],"names":["axios","apiEndpoint","authHeader","userService","registers","resendEmailConfirm","checkEmailExists","verifyEmail","login","checkEmailExistsInProperty","data","post","headers","then","res","status","email","get","resendEmailConfirmation","params","code","email_already_exists","Promise","reject","resolve","propertyId","property_id","token","access_token","localStorage","setItem","sessions","password"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { apiEndpoint } from '@iso/lib/helpers/endpoint';\nimport { authHeader } from '@iso/lib/helpers/authHeader';\n\nexport const userService = {\n  registers,\n  resendEmailConfirm,\n  checkEmailExists,\n  verifyEmail,\n  login,\n  checkEmailExistsInProperty\n};\n\nfunction registers(data){\n  return (\n    axios\n      .post(\n        apiEndpoint.registers,\n        data,\n        {\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      ).then(res => {\n        if(res && res.status === 200){\n          return res.data;\n        }\n      })\n  );\n}\n\nfunction resendEmailConfirm(email){\n  return (\n    axios\n      .get(\n        apiEndpoint.resendEmailConfirmation,\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n          params: {\n            email\n          }\n        }\n      ).then(res => {\n        if(res && res.status === 200){\n          return res.data;\n        }\n      })\n  );\n}\n\nfunction checkEmailExists(email){\n  return (\n    axios.get(\n      apiEndpoint.checkEmailExists,\n      {\n        headers: { \"Content-Type\": \"application/json\" },\n        params:{\n          email\n        }\n      }\n    ).then(res => {\n      if(res && res.status === 200 && res.data.code === '0000' && res.data.email_already_exists){\n        return Promise.reject('Email already exists');\n      }\n      return Promise.resolve();\n    })\n  );\n}\n\nfunction checkEmailExistsInProperty(email, propertyId){\n  return (\n    axios.get(\n      apiEndpoint.checkEmailExistsInProperty,\n      {\n        headers: authHeader(),\n        params:{\n          email,\n          property_id: propertyId\n        }\n      }\n    ).then(res => {\n      if(res && res.status === 200 && res.data.code === '0000' && res.data.email_already_exists){\n        return Promise.reject('Email already exists');\n      }\n      return Promise.resolve();\n    })\n  );\n}\n\nfunction verifyEmail(data){\n  return (\n    axios\n      .get(\n        apiEndpoint.verifyEmail,\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n          params:{\n            token: data.token,\n            property_id: data.property_id\n          }\n        }\n      ).then(res => {\n        if(res && res.data.code === '0000' && res.data.access_token){\n          localStorage.setItem(\"id_token\", res.data.access_token);\n        } \n        return res.data;\n      })\n  );\n}\n\nfunction login(data) {\n  return (\n    axios\n      .post(\n        apiEndpoint.sessions,\n        { email: data.email, password: data.password },\n        {\n          headers: { \"Content-Type\": \"application/json\" , 'Accept': 'application/json',}\n        }\n      )\n      .then(res => {\n        if(res && res.data.code === '0000' && res.data.access_token){\n          localStorage.setItem(\"id_token\", res.data.access_token);\n        }\n\n        return res.data;\n      })\n  );\n}"]},"metadata":{},"sourceType":"module"}